/*
 * The MIT License
 *
 * Copyright: Copyright (C) 2014 T2Ti.COM
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 * The author may be contacted at: t2ti.com@gmail.com
 * 
 * @author Claudio de Barros (T2Ti.com)
 * @version 2.0
 */
package com.t2ti.pafecf.view;

import com.sun.jna.ptr.IntByReference;
import com.t2ti.pafecf.infra.Biblioteca;
import com.t2ti.pafecf.infra.Constantes;
import com.t2ti.pafecf.infra.Ecf;
import com.t2ti.pafecf.infra.Paf;
import com.t2ti.pafecf.infra.SessaoUsuario;
import jACBrFramework.ACBrEventListener;
import jACBrFramework.ACBrException;
import jACBrFramework.serial.ecf.EstadoECF;
import jACBrFramework.tefd.ACBrTEFD;
import jACBrFramework.tefd.ModalResult;
import jACBrFramework.tefd.RetornoECF;
import jACBrFramework.tefd.TefTipo;
import jACBrFramework.tefd.eventos.AguardaRespEventObject;
import jACBrFramework.tefd.eventos.AntesCancelarTransacaoEventObject;
import jACBrFramework.tefd.eventos.ComandaECFAbreVinculadoEventObject;
import jACBrFramework.tefd.eventos.ComandaECFEventObject;
import jACBrFramework.tefd.eventos.ComandaECFImprimeViaEventObject;
import jACBrFramework.tefd.eventos.ComandaECFPagamentoEventObject;
import jACBrFramework.tefd.eventos.ExibeMsgEventObject;
import jACBrFramework.tefd.eventos.InfoECFEventObject;
import java.awt.Dimension;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

public class Tef extends javax.swing.JDialog {

    private ACBrTEFD acbrTef;
    private boolean impressaoOk;
    private boolean cupomCancelado;

    public Tef(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        labelMensagens.setText("");
        impressaoOk = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelMensagens = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(600, 80));
        getContentPane().setLayout(new java.awt.CardLayout());

        labelMensagens.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        labelMensagens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMensagens.setText("Aguardando TEF");
        getContentPane().add(labelMensagens, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelMensagens;
    // End of variables declaration//GEN-END:variables

    private ACBrTEFD getAcbrTefD() {
        if (acbrTef == null) {
            try {
                acbrTef = new ACBrTEFD();
                acbrTef.setArqLOG("logAcbrTefD.txt");
                acbrTef.setAutoAtivar(true);
                acbrTef.setAutoEfetuarPagamento(false);
                acbrTef.setAutoFinalizarCupom(false);
                acbrTef.setMultiplosCartoes(true);
                acbrTef.setEsperaSTS(7);
                acbrTef.setEsperaSleep(250);
                acbrTef.setPathBackup(Constantes.DIRETORIO_APLICACAO + "tef" + System.getProperty("file.separator"));

                acbrTef.addOnAguardaResp(new ACBrEventListener<AguardaRespEventObject>() {

                    @Override
                    public void notification(AguardaRespEventObject e) {
                        onAguardaResp(e);
                    }
                });
                acbrTef.addOnExibeMensagem(new ACBrEventListener<ExibeMsgEventObject>() {

                    @Override
                    public void notification(ExibeMsgEventObject e) {
                        onExibeMensagem(e);
                    }
                });
                acbrTef.addOnComandaECF(new ACBrEventListener<ComandaECFEventObject>() {

                    @Override
                    public void notification(ComandaECFEventObject e) {
                        onComandaECF(e);
                    }
                });
                acbrTef.addOnComandaECFPagamento(new ACBrEventListener<ComandaECFPagamentoEventObject>() {

                    @Override
                    public void notification(ComandaECFPagamentoEventObject e) {
                        onComandaECFPagamento(e);
                    }
                });
                acbrTef.addOnComandaECFAbreVinculado(new ACBrEventListener<ComandaECFAbreVinculadoEventObject>() {

                    @Override
                    public void notification(ComandaECFAbreVinculadoEventObject e) {
                        onComandaECFAbreVinculado(e);
                    }
                });
                acbrTef.addOnComandaECFImprimeVia(new ACBrEventListener<ComandaECFImprimeViaEventObject>() {

                    @Override
                    public void notification(ComandaECFImprimeViaEventObject e) {
                        onComandaECFImprimeVia(e);
                    }
                });
                acbrTef.addOnInfoECF(new ACBrEventListener<InfoECFEventObject>() {

                    @Override
                    public void notification(InfoECFEventObject e) {
                        onInfoECF(e);
                    }
                });
                acbrTef.addOnAntesCancelarTransacao(new ACBrEventListener<AntesCancelarTransacaoEventObject>() {

                    @Override
                    public void notification(AntesCancelarTransacaoEventObject e) {
                        onAntesCancelarTransacao(e);
                    }
                });
            } catch (ACBrException ex) {
                acbrTef = null;
                JOptionPane.showMessageDialog(null, "Ocorreu um erro ao configurar o AcbrTEFD.\n" + ex.getMessage(), "Erro do Sistema", JOptionPane.ERROR_MESSAGE);
            }
        }
        return acbrTef;
    }

    private void onAguardaResp(AguardaRespEventObject e) {
        labelMensagens.setText("Aguardando: " + e.getArquivo() + " - " + e.getTimeoutEmSegundos());
    }

    private void onExibeMensagem(ExibeMsgEventObject e) {
        switch (e.getOperacao()) {
            case OK: {
                JOptionPane.showMessageDialog(this, e.getMensagem(), "Informação do Sistema", JOptionPane.INFORMATION_MESSAGE);
                e.setaModalResult(new IntByReference(ModalResult.OK.getCodigo()));
                break;
            }
            case YesNo: {
                int resposta = JOptionPane.showConfirmDialog(this, e.getMensagem(), "Informação do Sistema", JOptionPane.YES_NO_OPTION);
                if (resposta == JOptionPane.YES_OPTION) {
                    e.setaModalResult(new IntByReference(ModalResult.Yes.getCodigo()));
                } else {
                    e.setaModalResult(new IntByReference(ModalResult.No.getCodigo()));
                }
                break;
            }
            case ExibirMsgOperador:
            case RemoverMsgOperador:
            case ExibirMsgCliente:
            case RemoverMsgCliente: {
                labelMensagens.setText(e.getMensagem());
                break;
            }
            case DestaqueVia: {
                labelMensagens.setText(e.getMensagem());
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException ex) {
                }
                break;
            }
        }
    }

    private void onInfoECF(InfoECFEventObject e) {
        switch (e.getOperacao()) {
            case SubTotal: {
                try {
                    e.setRetornoEcf(SessaoUsuario.getAcbrEcf().getSubTotal() - SessaoUsuario.getAcbrEcf().getTotalPago());
                } catch (ACBrException ex) {
                    ex.printStackTrace();
                    e.setRetornoEcf(0.0);
                }
                break;
            }
            case TotalAPagar: {
                e.setRetornoEcf(0.0);
                break;
            }
            case EstadoECF: {
                try {
                    switch (SessaoUsuario.getAcbrEcf().getEstado()) {
                        case EstadoECF.LIVRE: {
                            e.setRetornoEcf(RetornoECF.Livre);
                            break;
                        }
                        case EstadoECF.VENDA: {
                            e.setRetornoEcf(RetornoECF.VendaDeItens);
                            break;
                        }
                        case EstadoECF.PAGAMENTO: {
                            e.setRetornoEcf(RetornoECF.PagamentoOuSubTotal);
                            break;
                        }
                        case EstadoECF.RELATORIO: {
                            e.setRetornoEcf(RetornoECF.CDCouRelatorioGerencial);
                            break;
                        }
                        default: {
                            e.setRetornoEcf(RetornoECF.Outro);
                            break;
                        }
                    }
                } catch (ACBrException ex) {
                    ex.printStackTrace();
                    e.setRetornoEcf(RetornoECF.Outro);
                }
                break;
            }
        }
    }

    private void onComandaECF(ComandaECFEventObject e) {
        switch (e.getOperacao()) {
            case AbreGerencial: {
                try {
                    SessaoUsuario.getAcbrEcf().abreRelatorioGerencial(SessaoUsuario.getConfiguracao().getEcfRelatorioGerencial().getX());
                    e.setRetornoEcf(new IntByReference(1));
                } catch (ACBrException ex) {
                    e.setRetornoEcf(new IntByReference(0));
                    //JOptionPane.showMessageDialog(this, "Erro ao abrir o relatório gerencial.\n" + ex.getMessage(), "Erro do Sistema", JOptionPane.ERROR_MESSAGE);
                }
                break;
            }
            case FechaGerencial:
            case FechaVinculado: {
                try {
                    SessaoUsuario.getAcbrEcf().fechaRelatorio();
                    impressaoOk = true;
                    Paf.gravaR06("CC");
                    e.setRetornoEcf(new IntByReference(1));
                } catch (ACBrException ex) {
                    impressaoOk = false;
                    e.setRetornoEcf(new IntByReference(0));
                    //JOptionPane.showMessageDialog(this, "Erro ao abrir o relatório gerencial.\n" + ex.getMessage(), "Erro do Sistema", JOptionPane.ERROR_MESSAGE);
                }
                break;
            }
            case CancelaCupom: {
                try {
                    Ecf.cancelaCupom();
                    cupomCancelado = true;
                    e.setRetornoEcf(new IntByReference(1));
                } catch (ACBrException ex) {
                    e.setRetornoEcf(new IntByReference(0));
                    cupomCancelado = false;
                    //JOptionPane.showMessageDialog(this, "Erro ao cancelar o cupom.\n" + ex.getMessage(), "Erro do Sistema", JOptionPane.ERROR_MESSAGE);
                }
                break;
            }
            case FechaCupom: {
                String mensagem = "";
                if (SessaoUsuario.vendaAtual.getIdEcfPreVendaCabecalho() != null) {
                    mensagem = "PV"
                            + Biblioteca.repete("0", 10 - String.valueOf(SessaoUsuario.vendaAtual.getIdEcfPreVendaCabecalho()).length())
                            + SessaoUsuario.vendaAtual.getIdEcfPreVendaCabecalho();
                }
                if (SessaoUsuario.vendaAtual.getIdEcfDav() != null) {
                    switch (SessaoUsuario.tipoDAV) {
                        case "0": {
                            mensagem = "DAV"
                                    + Biblioteca.repete("0", 10 - String.valueOf(SessaoUsuario.vendaAtual.getIdEcfDav()).length())
                                    + SessaoUsuario.vendaAtual.getIdEcfDav();
                            break;
                        }
                        case "1": {
                            mensagem = "Fórmula manipulada conf. DAV nº "
                                    + Biblioteca.repete("0", 10 - String.valueOf(SessaoUsuario.vendaAtual.getIdEcfDav()).length())
                                    + SessaoUsuario.vendaAtual.getIdEcfDav();
                            break;
                        }
                        case "2": {
                            mensagem = "DAV-OS"
                                    + Biblioteca.repete("0", 10 - String.valueOf(SessaoUsuario.vendaAtual.getIdEcfDav()).length())
                                    + SessaoUsuario.vendaAtual.getIdEcfDav();
                            break;
                        }
                    }
                }

                if (SessaoUsuario.getConfiguracao().getEcfEmpresa().getUf().equals("DF")) {
                    mensagem = "MD5:" + SessaoUsuario.md5 + mensagem + "NL" + System.getProperty("line.separator");
                } else {
                    mensagem = "MD5:" + SessaoUsuario.md5 + mensagem + System.getProperty("line.separator");
                }

                try {
                    if (SessaoUsuario.getConfiguracao().getEcfEmpresa().getUf().equals("MG")) {
                        mensagem = mensagem
                                + "MINAL LEGAL:"
                                + SessaoUsuario.getConfiguracao().getEcfEmpresa().getCnpj() + " "
                                + new SimpleDateFormat("ddMMyyyy").format(SessaoUsuario.getAcbrEcf().getDataHora()) + " "
                                + Biblioteca.formatoDecimal("V", SessaoUsuario.vendaAtual.getValorFinal().doubleValue()).replace(",", "")
                                + System.getProperty("line.separator");
                    } else if (SessaoUsuario.getConfiguracao().getEcfEmpresa().getUf().equals("RJ")) {
                        mensagem = mensagem
                                + "CUPOM MANIA, CONCORRA A PRÊMIOS"
                                + System.getProperty("line.separator")
                                + "ENVIE SMS P/ 6789: "
                                + SessaoUsuario.getConfiguracao().getEcfEmpresa().getInscricaoEstadual()
                                + new SimpleDateFormat("ddMMyy").format(SessaoUsuario.getAcbrEcf().getDataHora())
                                + SessaoUsuario.getAcbrEcf().getNumCOO() + SessaoUsuario.getAcbrEcf().getNumECF();
                    } else if (SessaoUsuario.getConfiguracao().getEcfEmpresa().getUf().equals("DF")) {
                        mensagem = mensagem
                                + "ESTABELECIMENTO INCLUÍDO NO PROGRAMA DE" + System.getProperty("line.separator")
                                + "CONCESSÃO DE CRÉDITOS - LEI nº 4.159/08" + System.getProperty("line.separator")
                                + "NOTA LEGAL: ICMS = " + Biblioteca.formatoDecimal("V", SessaoUsuario.vendaAtual.getIcms().doubleValue()) + System.getProperty("line.separator");
                    } else if (SessaoUsuario.getConfiguracao().getEcfEmpresa().getUf().equals("PB")) {
                        mensagem = mensagem
                                + "PARAÍBA LEGAL - RECEITA CIDADÃ" + System.getProperty("line.separator")
                                + "TORPEDO PREMIADO:" + System.getProperty("line.separator")
                                + SessaoUsuario.getConfiguracao().getEcfEmpresa().getInscricaoEstadual()
                                + new SimpleDateFormat("ddMMyyyy").format(SessaoUsuario.getAcbrEcf().getDataHora()) + " "
                                + SessaoUsuario.getAcbrEcf().getNumCOO() + " "
                                + Biblioteca.formatoDecimal("V", SessaoUsuario.vendaAtual.getValorFinal().doubleValue()).replace(",", "")
                                + System.getProperty("line.separator");
                    }

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                try {
                    Ecf.fechaCupom(mensagem + SessaoUsuario.getConfiguracao().getMensagemCupom());
                    e.setRetornoEcf(new IntByReference(1));
                } catch (ACBrException ex) {
                    e.setRetornoEcf(new IntByReference(0));
                    ex.printStackTrace();
                }
                break;
            }
            case SubTotalizaCupom: {
                try {
                    Ecf.subTotalizaCupom(0.0);
                    e.setRetornoEcf(new IntByReference(1));
                } catch (ACBrException ex) {
                    e.setRetornoEcf(new IntByReference(0));
                    ex.printStackTrace();
                }
                break;
            }
            case PulaLinhas: {
                try {
                    SessaoUsuario.getAcbrEcf().pulaLinhas(SessaoUsuario.getAcbrEcf().getLinhasEntreCupons());
                    SessaoUsuario.getAcbrEcf().cortaPapel(true);
                    Thread.sleep(2000);
                    e.setRetornoEcf(new IntByReference(1));
                } catch (Exception ex) {
                    ex.printStackTrace();
                    e.setRetornoEcf(new IntByReference(0));
                }
                break;
            }
        }
    }

    private void onComandaECFPagamento(ComandaECFPagamentoEventObject e) {
        try {
            SessaoUsuario.getAcbrEcf().efetuaPagamento(e.getIndiceEcf(), e.getValor(), "", true);
            e.setRetornoEcf(new IntByReference(1));
        } catch (ACBrException ex) {
            e.setRetornoEcf(new IntByReference(0));
            ex.printStackTrace();
        }
    }

    private void onComandaECFImprimeVia(ComandaECFImprimeViaEventObject e) {
        impressaoOk = false;
        switch (e.getTipoRelatorio()) {
            case Gerencial: {
                try {
                    SessaoUsuario.getAcbrEcf().linhaRelatorioGerencial(e.getImagemComprovante(), 0);
                    e.setRetornoEcf(new IntByReference(1));
                } catch (ACBrException ex) {
                    e.setRetornoEcf(new IntByReference(0));
                    ex.printStackTrace();
                }
            }
            case Vinculado: {
                try {
                    SessaoUsuario.getAcbrEcf().linhaCupomVinculado(e.getImagemComprovante());
                    e.setRetornoEcf(new IntByReference(1));
                } catch (ACBrException ex) {
                    e.setRetornoEcf(new IntByReference(0));
                    ex.printStackTrace();
                }
            }
        }
    }

    private void onComandaECFAbreVinculado(ComandaECFAbreVinculadoEventObject e) {
        try {
            SessaoUsuario.getAcbrEcf().abreCupomVinculado(e.getCoo(), e.getIndiceEcf(), e.getValor());
            e.setRetornoEcf(new IntByReference(1));
        } catch (ACBrException ex) {
            e.setRetornoEcf(new IntByReference(0));
            ex.printStackTrace();
        }
    }

    private void onAntesCancelarTransacao(AntesCancelarTransacaoEventObject e) {
        try {
            switch (SessaoUsuario.getAcbrEcf().getEstado()) {
                case EstadoECF.VENDA:
                case EstadoECF.PAGAMENTO: {
                    Ecf.cancelaCupom();
                    cupomCancelado = true;
                    break;
                }
                case EstadoECF.RELATORIO: {
                    SessaoUsuario.getAcbrEcf().fechaRelatorio();
                    Paf.gravaR06("CC");
                    break;
                }
            }
        } catch (Exception ex) {
            cupomCancelado = false;
            //ex.printStackTrace();
        }
    }

    public void inicializar() throws Exception {
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                if (getAcbrTefD() != null) {
                    getAcbrTefD().inicializar(TefTipo.TefDial);
                }
                return null;
            }

            @Override
            protected void done() {
                dispose();
            }
        };
        worker.execute();
        setVisible();
    }

    public boolean crt(double pValor, String pIndiceFPG_ECF) throws Exception {
        final double valor = pValor;
        final String indice = pIndiceFPG_ECF;
        SwingWorker<Boolean, Object> worker = new SwingWorker<Boolean, Object>() {

            @Override
            protected Boolean doInBackground() throws Exception {
                return getAcbrTefD().crt(valor, indice);
            }

            @Override
            protected void done() {
                dispose();
            }

        };
        worker.execute();
        setVisible();

        return worker.get();
    }

    public String getNsu(int indiceTransacao) throws ACBrException {
        return getAcbrTefD().getRespostasPendentes().get(indiceTransacao).getNSU();
    }

    public String getRede(int indiceTransacao) throws ACBrException {
        return getAcbrTefD().getRespostasPendentes().get(indiceTransacao).getRede();
    }

    public String getDebitoCredito(int indiceTransacao) throws ACBrException {
        if (getAcbrTefD().getRespostasPendentes().get(indiceTransacao).getTipoTransacao() >= 10
                && getAcbrTefD().getRespostasPendentes().get(indiceTransacao).getTipoTransacao() <= 12) {
            return "C";
        } else if (getAcbrTefD().getRespostasPendentes().get(indiceTransacao).getTipoTransacao() >= 20
                && getAcbrTefD().getRespostasPendentes().get(indiceTransacao).getTipoTransacao() <= 25) {
            return "D";
        } else {
            return "";
        }
    }

    public void finalizarCupom() throws Exception {
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                if (getAcbrTefD() != null) {
                    getAcbrTefD().finalizarCupom();
                }
                return null;
            }

            @Override
            protected void done() {
                dispose();
            }
        };
        worker.execute();
        setVisible();
    }

    public void imprimirTransacoesPendentes() throws Exception {
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                if (getAcbrTefD() != null) {
                    getAcbrTefD().imprimirTransacoesPendentes();
                }
                return null;
            }

            @Override
            protected void done() {
                dispose();
            }
        };
        worker.execute();

        setVisible();
    }

    public void cancelarTransacoesPendentes() throws Exception {
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                if (getAcbrTefD() != null) {
                    getAcbrTefD().cancelarTransacoesPendentes();
                }
                return null;
            }

            @Override
            protected void done() {
                dispose();
            }
        };
        worker.execute();

        setVisible();
    }

    public void adm() throws Exception {
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                if (getAcbrTefD() != null) {
                    getAcbrTefD().adm();
                }
                return null;
            }

            @Override
            protected void done() {
                dispose();
            }
        };
        worker.execute();

        setVisible();
    }

    private void setVisible() {
        setLocationRelativeTo(null);
        setPreferredSize(new Dimension(600, 80));
        setVisible(true);
    }

    public boolean isImpressaoOk() {
        return impressaoOk;
    }

    public boolean isCupomCancelado() {
        return cupomCancelado;
    }
}
